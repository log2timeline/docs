= Code review process

:toc:
:toclevels: 4

:numbered!:
[abstract]
== Summary
Description of the code review process using by the log2timeline projects

:numbered:
== Code review process
In the next paragraphs the review process of the log2timeline projects as plaso
is described.

=== Step 1 - set up your personal fork
The first step to contributing to one of the log2timeline projects is to set up
your personal fork.

To set up a personal fork:

image:https://raw.githubusercontent.com/log2timeline/l2tdocs/master/images/Code%20review%20-%20step%201.png[Step 1]

`1`. In github go to e.g.: https://github.com/log2timeline/plaso and select
"fork". This will create your personal fork.

`2`. Clone your personal fork repository to your development workstation e.g.
....
git clone https://github.com/$USERNAME/plaso.git
....

`3`. Add the log2timeline project as upstream:
....
cd plaso
git remote add upstream https://github.com/log2timeline/plaso.git
....

`4`. Make sure git is configured correctly:
....
git config --global user.name "Full Name"
git config --global user.email name@example.com
git config --global push.default matching
....

`5`. Make sure `.netrc` is configured. For more information see:
https://gist.github.com/technoweenie/1072829

=== Step 2 - Start a new feature branch
Every code change is stored in a separate feature branch:

image:https://raw.githubusercontent.com/log2timeline/l2tdocs/master/images/Code%20review%20-%20step%202.png[Step 2]

`1.` Make sure the master branch of your fork is synced with upstream:
....
git checkout master && git fetch upstream && git pull --rebase upstream master && git push -f
....

`2.` Create a feature branch:
....
git checkout -b feature
....

`3.` Make the necessary code changes, commit them to your feature branch and upload them to your fork:
....
git push --set-upstream origin feature
....

=== Step 3 - Making changes
Make your changes to the code and make sure to push them to the feature branch
of your fork.

Commit all code changes to your feature branch and upload them:
....
git push
....

=== Step 4 - Start a code review
Once you think your changes are ready, you start the review process. There are two options to start a code review on Github:

==== Option 1: Create a pull request using the Github web UI
This process is documented by Github https://help.github.com/articles/creating-a-pull-request/[here].
Once this is done, request a review from one of the project maintainers, as documented by
Github https://help.github.com/articles/requesting-a-pull-request-review/[here].

If you don't know who to request, use the reviewer suggested by Github.

==== Option 2: Use the review.py script from l2tdevtools:
Check out the l2tdevtools repository
`git clone https://github.com/log2timeline/l2tdevtools.git`

Run the review.py script with the create-pr option:
```
PYTHONPATH=./l2tdevtools python ./l2tdevtools/tools/review.py --project_path=/path/to/the/project create-pr
```

=== Step 5 - Status checks
Once your pull request has been created, automated checkers will run to on your changes to check for mistakes, or code
that doesn't match the style guide. Review the https://help.github.com/articles/about-status-checks/[output from the tools],
and make sure your pull request passes.

Your pull request https://help.github.com/articles/about-required-status-checks/[cannot be merged] until the checkers
report everything is OK.

=== Step 6 - Making changes after reviews
Your pull request will be https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/[assigned]
to a project maintainer either by the script or the reviewer. The maintainer will review your code, and may push some
changes to your branch and/or request that you make changes. If they do make changes, make sure your local copy of the
branch (`git pull`) before making further changes.

After they've reviewed your code, make any necessary changes, and push them to your feature branch. After that, reply to the comments made by the
reviewer, then https://help.github.com/articles/requesting-a-pull-request-review/[request a new review] from the same reviewer.

=== Step 5 - Merging
Once the pull request assignee is happy with your propopsed changes, and all the status checks have passed, they'll
merge your pull request into the project. Once that's completed, you can delete your feature branch.

[preface]
== Document information
[cols="1,5"]
|===
| Author(s): | Joachim Metz <joachim.metz@gmail.com>
| Abstract: | Description of the code review process using by the log2timeline projects
| Classification: | Public
| Keywords: | Development process
| Status: | In use
|===

[preface]
== License
....
Copyright (C) 2016-2018, log2timeline projects maintainers <log2timeline-maintainers@googlegroups.com>
Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.3 or any later version
published by the Free Software Foundation; with no Invariant Sections, no
Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included
in the "LICENSE" file.
....

[preface]
== Revision history
[cols="1,1,1,5",options="header"]
|===
| Version | Author | Date | Comments
| 0.0.1 | Joachim Metz | January 2016 | Initial version based on template.
| 0.0.2 | Daniel White | July 2018 | Updates for GitHub code review.
|===
