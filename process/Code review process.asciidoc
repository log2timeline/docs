= Code review process

:toc:
:toclevels: 4

:numbered!:
[abstract]
== Summary
Description of the code review process using by the log2timeline projects

[preface]
== Document information
[cols="1,5"]
|===
| Author(s): | Joachim Metz <joachim.metz@gmail.com>
| Abstract: | Description of the code review process using by the log2timeline projects
| Classification: | Public
| Keywords: | Design proposal
| Status: | Draft
|===

[preface]
== License
....
Copyright (C) 2016, log2timeline projects maintainers <log2timeline-maintainers@googlegroups.com>
Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.3 or any later version
published by the Free Software Foundation; with no Invariant Sections, no
Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included
in the "LICENSE" file.
....

[preface]
== Revision history
[cols="1,1,1,5",options="header"]
|===
| Version | Author | Date | Comments
| 0.0.1 | Joachim Metz | January 2016 | Initial version based on template.
|===

:numbered:
== Introduction
The plaso review process was in need of some revision to allow us to use the 
continuous integration (CI) testing functionality of github.

== Code review process - version 1
In the first version of the plaso code review process we used Rietveld 
(codereview.appspot.com) for code reviews. Rietveld provides a Python script 
named upload.py to upload code diffs to codereview.appspot.com. Though it has 
git support, Rietveld was build around svn and therefore does not entirely 
match a git-based workflow.

Several utility scripts have been built around upload.py to make the code
review process more user friendly.

=== Need for change

* current solution requires contributors to have commit access
** not all have enabled 2 factor authentication
** additional administrative burden
** larger risk of a commit messing up master repo
* want automated testing on code reviews
* utility scripts do not support the Windows operating system

=== Alternatives

* github PR review; several objections:
** github makes a mess of the commit history
** very slow on large reviews
** unable to track multiple patch sets easily
* reviewable.io; improvement over github PR review
** has patch set support
** looks nice but UX unclear

So decision to stick with Rietveld and fake integrations.

== Code review process - version 2

* Step 1 - set up your personal fork

=== Step 1 - set up your personal fork
The first step to contributing to one of the log2timeline projects is to set up 
your personal fork.

To set up a personal fork:

image:https://docs.google.com/drawings/d/1QByAJgaBc5IVUfTsXcNnHImUqO0RidaBfnJMzNTSR3M/pub?w=961&h=384[Step 1]

`1`. In github go to e.g.: https://github.com/log2timeline/plaso and select
"fork". This will create your personal fork.

`2`. Clone your personal fork repository to your development workstation e.g.
....
git clone https://github.com/$USERNAME/plaso.git
....

`3`. Add the log2timeline project as upstream:
....
cd plaso
git remote add upstream https://github.com/log2timeline/plaso.git
....

`4`. Make sure git is configured correctly:
....
git config --global user.name "Full Name"
git config --global user.email name@example.com
git config --global push.default matching
....

`5`. Make sure `.netrc` is configured

:numbered!:
[appendix]
== Appendix

