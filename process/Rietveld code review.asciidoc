= Reitveld Code review


:numbered!:
[abstract]
== Summary
Description of the code review process for log2timeline process using Rietveld (http://codereview.appspot.com[codereview.appspot.com]).

:numbered:

image:https://raw.githubusercontent.com/log2timeline/l2tdocs/master/images/Code%20review%20-%20step%203.png[Step 3]

`1.` Commit all code changes and upload them:
....
git push
....

`2.` Run the review script to create a new code review:
....
./utils/review.py create-pr
....

The script performs the following steps:

* runs the linter
* runs the unit tests
* checks if your local clone is up to date with the upstream/master and updates
if necessary by running: `git pull --rebase upstream master`
* uploads the diff with upstream/master to codereview.appspot.com
* creates a github pull request (PR)
* mails the maintainers
* creates a review file in `./review/`

[NOTE]
The diff sent to codereview.appspot.com is relative to the state of
upstream/master in your local git repository. The review script will run
`git fetch upstream` to make sure the state is up to date. An alternative
diffbase can be define by specifying the `--diffbase` parameter e.g.
`./utils/review.py --diffbase=origin/feature create`.

`3.` The pull request will trigger automated testing. You can see the status of
your pull request on the plaso project site:
https://github.com/log2timeline/plaso/pulls

=== Step 5 - Code review
The code reviewer will:

* check the status of the pull request on the github project page e.g.
https://github.com/log2timeline/plaso/pull/

If tests are broken (and it is due to the CL) the reviewer will ask the
contributor fix this.

* comment on the changes on: https://codereview.appspot.com/[codereview.appspot.com]

=== Step 6 - Update code review
The process of updating a code reviews is very similar to that of starting a
code review.

`1.` Commit all code changes and upload them:
....
git push
....

`2.` Run the review script to update the code review:
....
./utils/review.py update
....

The script performs the following steps:

* determines the codereview.appspot.com issue number from the corresponding
review file in `./reviews/`
* runs the linter
* runs the unit tests
* checks if your local clone is up to date with the upstream/master and updates
if necessary by running: `git pull --rebase upstream master`
* uploads the diff with upstream/master to codereview.appspot.com
* mails the maintainers

`3.` Any update to the feature branch while there is a PR will trigger the
automated testing.

=== Step 7 - Merging the code review with upstream
After the review is done the reviewer will merge the CL and submit it to upstream.

[NOTE]
Only project maintainers need to perform this step.

image:https://raw.githubusercontent.com/log2timeline/l2tdocs/master/images/Code%20review%20-%20step%207.png[Step 7]

`1.` Run the review script to merge the code review:
....
./utils/review.py merge CODEREVIEW ORGANIZATION:BRANCH
....

Where:

* `CODEREVIEW` is the code review (CR) or change list (CL) on
codereview.appspot.com
* `ORGANIZATION:BRANCH` is the github organization, typically the username, and
the name of the feature branch

The script performs the following steps:

* checks if the maintainer's local clone is up to date with the orgin/master and
updates if necessary by running: `git pull`
* pulls in the changes from the feature branch by runing:
`git pull --squash https://github.com/$USERNAME/plaso.git $BRANCH`
* updates the API documentation
* updates the version information
* runs the linter
* runs the unit tests
* commits the changes under the name of the contributor and pushes the
changes to upstream

=== Step 8 - Closing a code review
After the CL has been merged the contributor can remove the feature branch and close the codereview.

image:https://raw.githubusercontent.com/log2timeline/l2tdocs/master/images/Code%20review%20-%20step%208.png[Step 8]

`1.` Run the review script to close the code review:
....
./utils/review.py close BRANCH
....

Where:

* `BRANCH` is the name of the feature branch

The script performs the following steps:

* Removes the feature branch from your local clone and your online fork
(origin). This triggers the PR to close.
* Closes the code review on codereview.appspot.com
* Removes the review file in `./reviews`
