= Design proposal - phased processing

:toc:
:toclevels: 4

:numbered!:
[abstract]
== Summary
Plaso log2timeline is an application to extract events from various files found
on a typical computer system. The multi process extraction approach used in plaso
version 1.4 and earlier adds extensive complexity to the codebase. This
proposal contains a design for a phased processing approach that should reduce
the complexity and related errors.

[preface]
== Document information
[cols="1,5"]
|===
| Author(s): | Joachim Metz <joachim.metz@gmail.com>
| Abstract: | Design proposal for phased processing in plaso
| Classification: | Public
| Keywords: | Design proposal, Phased processing, Plaso
| Status: | Draft
|===

[preface]
== License
....
Copyright (C) 2016, log2timeline projects maintainers <log2timeline-maintainers@googlegroups.com>
Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.3 or any later version
published by the Free Software Foundation; with no Invariant Sections, no
Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included
in the "LICENSE" file.
....

[preface]
== Revision history
[cols="1,1,1,5",options="header"]
|===
| Version | Author | Date | Comments
| 0.0.1 | Joachim Metz | January 2016 | Initial version based on template.
|===

:numbered:
== Introduction
Plaso log2timeline is an application to extract events from various files found
on a typical computer system.

=== Current situation
Plaso log2timeline currently support 2 modes of operation namely:

* single process extraction
* multi process extraction

==== Single process extraction
In single processing mode plaso log2timeline takes the following steps:

1. Preprocess the input (or source) data
  a. Determine if the source is a storage media device or image, a single file
or directory.
  b. Determine if the source data contains an installation of a known operating
system.
  c. Determine system settings needed for processing e.g. codepage, timezone,
etc.
2. Determine the files to process
3. Process the content of the files
  a. Calculate a digest hash the content of the file
  b. Determine if the file is a known archive file or compressed stream file
  c. Determine if the file has a known format and pre-select the appropriate
parser
  d. Extract events from the file
4. Write extracted events to the plaso storage file

Steps 2, 3 and 4 are repeated until there are no more files remaining to be
processed.

==== Multi process extraction
In multi process extraction mode plaso log2timeline does streps 2, 3 and 4
are run in parallel, where there is:

* one "collector" process to determine the files to process
* multiple "worker" processes to process the content of the files
* one "storage writer" process to write extracted events to the plaso storage
file

image:https://docs.google.com/drawings/d/1K09QjUh3Jjw7U0MmecazwzVF2INDCMCCJPfdurEeKt8/pub?w=960&h=720[Current situation]

Various issues in previous plaso releases have shown that:

* The current approach makes it hard to tell when processing is completed.
* The current approach makes it hard to recover from error condititions, e.g.
workers dying.
* That there are several conditions for potential deadlocks (indicated in red).

In short the current approach is unnecessary complex and fragile.

=== Desired situation
In the desired situation multi process extraction takes the following approach:

* One "foreman" (or "main") process has the role of issueing tasks to the
"workers". The "foreman" monitors the status of the "worker" and "storage
writer" processes and tracks the overall processing status in the plaso
storage file (or equivalent).
* Multiple "workers" process listen on a 1-to-n task queue for incoming
processing tasks
* One "storage writer" process listens on a n-to-1 queue for incoming
storage tasks. That result in writing the outcome of the processing to
the plaso storage file.

image:https://docs.google.com/drawings/d/1i8u_vaj0ALDP-2mGGUw81uxUQ0L49F4tTj5cnxGF3Rw/pub?w=960&h=720[Desired situation]

A task can be one of the following actions:

* Determine the files to process. This includes determining if the file is
a known archive file or compressed stream file.
* Calculate a digest hash the content of the file.
* Extract events from the file. This includes determining if the file has
a known format and pre-select the appropriate parser.

== Design

*TODO continue from here*

=== Task-based processing
Task-based processing is a way to process input sources without having to rely
on end of input and end of processing messages. The idea is to track the
processing using a task. The task will have to:

* compare the number of path specifications generated by the collector
(consumer) with the number of path specifications processed by the extraction
workers (producers). If the queue is empty the number of path specifications
(on both sides of the queue) must be the same.
* same for other producer and consumer numbers e.g. event object
* the number of items written to the storage

Task-based processing is needed to:

* allow for the worker processes to generate path specifications
* allow for multiple input sources to be processes at the same time

TODO: Track the numbers in mediators?

TODO: Use the foreman to track the completion of the task?

TODO: remove end of image and detect end of processing

TODO: track parse errors

TODO: describe what a task looks like:

* task
* results (event objects, path specifications, parse errors, analysis reports,
etc.)

=== Required steps

* Instead of path specification and event object communicate tasks between
the different processes.
* Move the "collector" functionality into the "worker" process.
* Use the plaso storage file (or equivalent) to track processing status.

=== Processing session information
Start with a separate session status file that contains a list of:

* the path specifications within the source
* the tasks requested for a specific path specification e.g. "hash X", written
by the "foreman"
* the tasks completed for a specific path specification, written by the
"storage writer"

== Notes

*TODO add multi-volume support in the preprocessor*

*TODO: turn preprocessing into a multi processable "phase" as well?*

:numbered!:
[appendix]
== References

https://docs.google.com/document/d/1ZdK5TpUfHFKaA5Xi6w-N_FPSubOdRJhhgOqmuZkTX3Y/edit#heading=h.25kh82j17av6[Process management and queuing]

